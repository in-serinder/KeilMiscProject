C51 COMPILER V9.59.0.0   MAX7219                                                           07/12/2025 04:08:41 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAX7219
OBJECT MODULE PLACED IN .\Objects\Max7219.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Max7219.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\M
                    -ax7219.lst) TABS(2) OBJECT(.\Objects\Max7219.obj)

line level    source

   1          // #include <REG52.H>
   2          #include <Max7219.h>
   3          #include <Ser.h>
   4          #include <string.h>
   5          
   6          sbit MAX7219_CLK = P2 ^ 0;
   7          sbit MAX7219_DIN = P2 ^ 1;
   8          sbit MAX7219_LOAD = P2 ^ 2; // 加载信号（片选）
   9          
  10          // 通过7219内部寄存器控制LED
  11          // Load处于低电平有效状态
  12          // 先将LOAD置高电平，再将数据写入7219，最后将LOAD置低电平 片选信号
  13          
  14          // 修正：删除函数声明，直接定义函数
  15          
  16          void Max7219_SendByte(unsigned char dat)
  17          {
  18   1          unsigned char i;
  19   1          for (i = 0; i < 8; i++) // 每个片选（管位）寄存器（每位一个8位二进制的数据）
  20   1          {
  21   2              MAX7219_CLK = 0;                    // 先将CLK置低电平
  22   2              MAX7219_DIN = (dat & 0x80) ? 1 : 0; // 先发送高位
  23   2              dat <<= 1;                          // 左移一位，将下一位放到最高位
  24   2              MAX7219_CLK = 1;                    // 再将CLK置高电平,一位数据发送完成
  25   2              Delay_us(1);                        // 延时，等待数据稳定
  26   2          }
  27   1      }
  28          
  29          void Max7219_Write(unsigned char address, unsigned char dat)
  30          {
  31   1          MAX7219_LOAD = 0;
  32   1          Max7219_SendByte(address);
  33   1          Max7219_SendByte(dat);
  34   1          MAX7219_LOAD = 1; // 完成传输
  35   1          Delay_us(1);
  36   1      }
  37          
  38          void Max7219_Init()
  39          {
  40   1      
  41   1          Delay_ms(10);
  42   1          // 使用正确的函数名和参数
  43   1          Max7219_Write(0x0C, 0x01); // 退出休眠模式
  44   1          Max7219_Write(0x0F, 0x00); // 关闭测试模式
  45   1          Max7219_Write(0x0B, 0x07); // 设置扫描界限为8位（DIG0~DIG7）
  46   1          Max7219_Write(0x09, 0xFF); // 启用BCD译码（简化数字显示）
  47   1          Max7219_Write(0x0A, 0x08); // 设置亮度（0~15，8为中等亮度）
  48   1      }
  49          
  50          void Max7219_Display(unsigned char digit, unsigned char value, unsigned char dot_v)
  51          {
  52   1          Max7219_Write(digit, value | (dot_v ? 0x80 : 0x00));
  53   1      }
  54          
C51 COMPILER V9.59.0.0   MAX7219                                                           07/12/2025 04:08:41 PAGE 2   

  55          void Max7219_Clear()
  56          {
  57   1          unsigned char i;
  58   1          for (i = 0; i < 8; i++)
  59   1          {
  60   2              Max7219_Write(i + 1, 0x00);
  61   2          }
  62   1      }
  63          
  64          void Max7219_NumDisplay(double num)
  65          {
  66   1          unsigned char i;
  67   1          unsigned int integer_part;               // 整数部分
  68   1          unsigned int decimal_part;               // 小数部分（取3位）
  69   1          unsigned char xdata int_digits[8] = {0}; // 存储整数每一位
  70   1          unsigned char xdata dec_digits[3] = {0}; // 存储小数每一位
  71   1          unsigned char int_len = 0;               // 整数位数
  72   1      
  73   1          if (num < 0)
  74   1          {
  75   2              Max7219_Display(1, 0x0A, 0); // 显示负号（0x0A对应'-'，需关闭BCD译码）
  76   2              num = -num;
  77   2              int_len = 1;
  78   2          }
  79   1      
  80   1          // 分离整数和小数部分
  81   1          integer_part = (unsigned int)num;
  82   1          decimal_part = (unsigned int)((num - integer_part) * 1000); // 保留3位小数
  83   1      
  84   1          if (integer_part == 0)
  85   1          {
  86   2              int_digits[int_len++] = 0; // 整数为0时直接记录
  87   2          }
  88   1          else
  89   1          {
  90   2              while (integer_part > 0)
  91   2              {
  92   3                  int_digits[int_len++] = integer_part % 10;
  93   3                  integer_part /= 10; // 移除最低位
  94   3              }
  95   2          }
  96   1      
  97   1          dec_digits[0] = (decimal_part / 100) % 10; // 第1位小数
  98   1          dec_digits[1] = (decimal_part / 10) % 10;  // 第2位小数
  99   1          dec_digits[2] = decimal_part % 10;         // 第3位小数
 100   1      
 101   1          // 显示整数部分（从高位到低位，位置从int_len开始）
 102   1          for (i = 0; i < int_len; i++)
 103   1          {
 104   2              // 位置：负号占1位时，整数从2开始；否则从1开始
 105   2              unsigned char pos = (int_len > 1 && int_digits[int_len - 1] == 0x0A) ? (i + 2) : (i + 1);
 106   2      
 107   2              unsigned char dot = (i == int_len - 1) ? 1 : 0;
 108   2              Max7219_Display(pos, int_digits[int_len - 1 - i], dot);
 109   2          }
 110   1      
 111   1          // 显示小数部分（接在整数后面）
 112   1          for (i = 0; i < 3; i++)
 113   1          {
 114   2              unsigned char pos = int_len + 1 + i; // 小数部分起始位置
 115   2              if (pos > 8)
 116   2                  break;
C51 COMPILER V9.59.0.0   MAX7219                                                           07/12/2025 04:08:41 PAGE 3   

 117   2              Max7219_Display(pos, dec_digits[i], 0);
 118   2          }
 119   1      }
 120          // void Max7219StringDisplay(char *str)
 121          // {
 122          //     unsigned char idata i = 0;
 123          //     unsigned char idata pos = 1; // Max7219有效位置：1~8
 124          
 125          //     bit dot = 0;
 126          
 127          //     while (str[i] != '\0' && pos <= 8)
 128          //     {
 129          
 130          //         if (str[i + 1] == '.')
 131          //         {
 132          //             dot = 1;
 133          //             i++; // 跳过小数点
 134          //         }
 135          
 136          //         if (str[i] >= '0' && str[i] <= '9')
 137          //         {
 138          //             Max7219_Display(9 - pos, (str[i] - '0'), dot); // 右到左
 139          //             pos++;                                         // 存在显示问题、、、、、
 140          
 141          //             UART_SendString("start");
 142          
 143          //             UART_SendChar('\n');
 144          
 145          //             UART_SendChar(str[0]);
 146          //             UART_SendChar('\n');
 147          //             UART_SendString("end");
 148          
 149          //             // UART_SendString("err");
 150          //             UART_SendChar('0' + strlen(str));
 151          //             if (pos > 8 && pos < 1)
 152          //             {
 153          //                 UART_SendString("err");
 154          //             }
 155          //         }
 156          
 157          //         dot = 0;
 158          //         i++;
 159          //     }
 160          
 161          //     while (pos <= 8)
 162          //     {
 163          //         Max7219_Display(pos++, 0x0F, 0); // 0x0F：熄灭该位
 164          //     }
 165          // }
 166          
 167          void Max7219DateDisplay(char *datestr)
 168          {
 169   1      
 170   1          unsigned char i;
 171   1          // Max7219_Clear();
 172   1          // insertCharInString(datestr, 4, '.');
 173   1      
 174   1          // insertCharInString(datestr, 7, '.');
 175   1      
 176   1          for (i = 0; i < 8; i++)
 177   1          {
 178   2      
C51 COMPILER V9.59.0.0   MAX7219                                                           07/12/2025 04:08:41 PAGE 4   

 179   2              Max7219_Display(8 - i, datestr[i], (i == 3 || i == 5) ? 1 : 0);
 180   2          }
 181   1      
 182   1          // UART_SendChar('\n');
 183   1          // Max7219StringDisplay(datestr);
 184   1          // UART_SendString(datestr);
 185   1          // UART_SendString("\r\n");
 186   1      }
 187          
 188          void Max7219TemperatureAndHumitidyDisplay(unsigned char *temp, unsigned char *hum)
 189          {
 190   1          char xdata th[11];
 191   1          unsigned char i;
 192   1      
 193   1          sprintf(th, "%s%s", temp, hum);
 194   1          removeChars(th, ".");
 195   1      
 196   1          UART_SendChar('\n');
 197   1          // Max7219StringDisplay(datestr);
 198   1          UART_SendString(th);
 199   1          UART_SendString("\r\n");
 200   1      
 201   1          for (i = 0; i < 8; i++)
 202   1          {
 203   2              Max7219_Display(8 - i, th[i], (i == 5 || i == 1) ? 1 : 0);
 204   2          }
 205   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    811    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =   ----      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
